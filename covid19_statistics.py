{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dc105a29-4ec0-4815-ac89-460b4796a946",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "### Korean Population by Region\n",
      "* Total population: 51669716\n",
      "\n",
      "| Region | Population | Ratio (%) |\n",
      "| ------ | ---------- | --------- |\n",
      "| Seoul | 9550227 | 18.5 |\n",
      "| Gyeongi | 13530519 | 26.2 |\n",
      "| Busan | 3359527 | 6.5 |\n",
      "| Gyeongnam | 3322373 | 6.4 |\n",
      "| Incheon | 2938429 | 5.7 |\n",
      "| Gyeongbuk | 2630254 | 5.1 |\n",
      "| Daegu | 2393626 | 4.6 |\n",
      "| Chungnam | 2118183 | 4.1 |\n",
      "| Jeonnam | 1838353 | 3.6 |\n",
      "| Jeonbuk | 1792476 | 3.5 |\n",
      "| Chungbuk | 1597179 | 3.1 |\n",
      "| Gangwon | 1536270 | 3.0 |\n",
      "| Daejeon | 1454679 | 2.8 |\n",
      "| Gwangju | 1441970 | 2.8 |\n",
      "| Ulsan | 1124459 | 2.2 |\n",
      "| Jeju | 675883 | 1.3 |\n",
      "| Sejong | 365309 | 0.7 |\n",
      "\n",
      "#Korean Population by Region\n",
      "* Total new cases:  1714\n",
      "\n",
      "| Region   | New Cases| Ratio(%) | New Cases/ 1M|\n",
      "| ---------| ---------| -------- | -------------|\n",
      "| Seoul | 644 | 37.6 | 67.43 |\n",
      "| Gyeongi | 529 | 30.9 | 39.10 |\n",
      "| Busan | 38 | 2.2 | 11.31 |\n",
      "| Gyeongnam | 29 | 1.7 | 8.73 |\n",
      "| Incheon | 148 | 8.6 | 50.37 |\n",
      "| Gyeongbuk | 28 | 1.6 | 10.65 |\n",
      "| Daegu | 41 | 2.4 | 17.13 |\n",
      "| Chungnam | 62 | 3.6 | 29.27 |\n",
      "| Jeonnam | 23 | 1.3 | 12.51 |\n",
      "| Jeonbuk | 27 | 1.6 | 15.06 |\n",
      "| Chungbuk | 27 | 1.6 | 16.90 |\n",
      "| Gangwon | 33 | 1.9 | 21.48 |\n",
      "| Daejeon | 16 | 0.9 | 11.00 |\n",
      "| Gwangju | 40 | 2.3 | 27.74 |\n",
      "| Ulsan | 20 | 1.2 | 17.79 |\n",
      "| Jeju | 5 | 0.3 | 7.40 |\n",
      "| Sejong | 4 | 0.2 | 10.95 |\n"
     ]
    }
   ],
   "source": [
    "def normalize_data(n_cases, n_people, scale):\n",
    "    \n",
    "   norm_cases = []\n",
    "   for idx, n in enumerate(n_cases):\n",
    "       norm_cases.append(n / n_people[idx] * scale)\n",
    "   return norm_cases\n",
    "regions = ['Seoul','Gyeongi', 'Busan','Gyeongnam', 'Incheon','Gyeongbuk', 'Daegu','Chungnam','Jeonnam','Jeonbuk','Chungbuk', 'Gangwon', 'Daejeon', 'Gwangju', 'Ulsan','Jeju','Sejong']\n",
    "n_people= [9550227, 13530519, 3359527, 3322373, 2938429, 2630254, 2393626, 2118183, 1838353,1792476, 1597179, 1536270, 1454679, 1441970, 1124459, 675883, 365309] \n",
    "n_covid = [644, 529, 38, 29, 148, 28, 41, 62, 23, 27, 27, 33, 16, 40, 20, 5, 4] \n",
    "sum_people= sum(n_people)\n",
    "sum_covid= sum(n_covid) \n",
    "norm_covid= normalize_data(n_covid, n_people, 1000000) \n",
    "\n",
    "print('### Korean Population by Region')\n",
    "print('* Total population:', sum_people)\n",
    "print()\n",
    "print('| Region | Population | Ratio (%) |')\n",
    "print('| ------ | ---------- | --------- |')\n",
    "for idx, pop in enumerate(n_people):\n",
    "    ratio = (pop / sum_people) * 100\n",
    "    print('| %s | %d | %.1f |' % (regions[idx], pop, ratio))\n",
    "print('')\n",
    "print('#Korean Population by Region')\n",
    "print('* Total new cases: ', sum_covid)\n",
    "print ()\n",
    "print('| Region   | New Cases| Ratio(%) | New Cases/ 1M|')\n",
    "print('| ---------| ---------| -------- | -------------|')\n",
    "for idx, cases in enumerate(n_covid):\n",
    "    ratio = (cases / sum_covid) * 100\n",
    "    print('| %s | %d | %.1f | %.2f |' % (regions[idx], cases, ratio, norm_covid[idx]))\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fb9fa599-869f-4fd1-9e21-10b46692e489",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "### Korean Population by Region\n",
      "* Total population: 51669716\n",
      "\n",
      "| Region | Population | Ratio (%) |\n",
      "| ------ | ---------- | --------- |\n",
      "| Seoul | 9550227 | 18.5 |\n",
      "| Gyeongi | 13530519 | 26.2 |\n",
      "| Busan | 3359527 | 6.5 |\n",
      "| Gyeongnam | 3322373 | 6.4 |\n",
      "| Incheon | 2938429 | 5.7 |\n",
      "| Gyeongbuk | 2630254 | 5.1 |\n",
      "| Daegu | 2393626 | 4.6 |\n",
      "| Chungnam | 2118183 | 4.1 |\n",
      "| Jeonnam | 1838353 | 3.6 |\n",
      "| Jeonbuk | 1792476 | 3.5 |\n",
      "| Chungbuk | 1597179 | 3.1 |\n",
      "| Gangwon | 1536270 | 3.0 |\n",
      "| Daejeon | 1454679 | 2.8 |\n",
      "| Gwangju | 1441970 | 2.8 |\n",
      "| Ulsan | 1124459 | 2.2 |\n",
      "| Jeju | 675883 | 1.3 |\n",
      "| Sejong | 365309 | 0.7 |\n",
      "\n",
      "#Korean Population by Region\n",
      "* Total new cases:  1714\n",
      "\n",
      "| Region   | New Cases| Ratio(%) | New Cases/ 1M|\n",
      "| ---------| ---------| -------- | -------------|\n",
      "| Seoul | 644 | 37.6 | 67.43 |\n",
      "| Gyeongi | 529 | 30.9 | 39.10 |\n",
      "| Busan | 38 | 2.2 | 11.31 |\n",
      "| Gyeongnam | 29 | 1.7 | 8.73 |\n",
      "| Incheon | 148 | 8.6 | 50.37 |\n",
      "| Gyeongbuk | 28 | 1.6 | 10.65 |\n",
      "| Daegu | 41 | 2.4 | 17.13 |\n",
      "| Chungnam | 62 | 3.6 | 29.27 |\n",
      "| Jeonnam | 23 | 1.3 | 12.51 |\n",
      "| Jeonbuk | 27 | 1.6 | 15.06 |\n",
      "| Chungbuk | 27 | 1.6 | 16.90 |\n",
      "| Gangwon | 33 | 1.9 | 21.48 |\n",
      "| Daejeon | 16 | 0.9 | 11.00 |\n",
      "| Gwangju | 40 | 2.3 | 27.74 |\n",
      "| Ulsan | 20 | 1.2 | 17.79 |\n",
      "| Jeju | 5 | 0.3 | 7.40 |\n",
      "| Sejong | 4 | 0.2 | 10.95 |\n"
     ]
    }
   ],
   "source": [
    "def normalize_data(n_cases, n_people, scale):\n",
    "    \n",
    "   norm_cases = []\n",
    "   for idx, n in enumerate(n_cases):\n",
    "       norm_cases.append(n / n_people[idx] * scale)\n",
    "   return norm_cases\n",
    "regions = ['Seoul','Gyeongi', 'Busan','Gyeongnam', 'Incheon','Gyeongbuk', 'Daegu','Chungnam','Jeonnam','Jeonbuk','Chungbuk', 'Gangwon', 'Daejeon', 'Gwangju', 'Ulsan','Jeju','Sejong']\n",
    "n_people= [9550227, 13530519, 3359527, 3322373, 2938429, 2630254, 2393626, 2118183, 1838353,1792476, 1597179, 1536270, 1454679, 1441970, 1124459, 675883, 365309] \n",
    "n_covid = [644, 529, 38, 29, 148, 28, 41, 62, 23, 27, 27, 33, 16, 40, 20, 5, 4] \n",
    "sum_people= sum(n_people)\n",
    "sum_covid= sum(n_covid) \n",
    "norm_covid= normalize_data(n_covid, n_people, 1000000) \n",
    "\n",
    "print('### Korean Population by Region')\n",
    "print('* Total population:', sum_people)\n",
    "print()\n",
    "print('| Region | Population | Ratio (%) |')\n",
    "print('| ------ | ---------- | --------- |')\n",
    "for idx, pop in enumerate(n_people):\n",
    "    ratio = (pop / sum_people) * 100\n",
    "    print('| %s | %d | %.1f |' % (regions[idx], pop, ratio))\n",
    "print('')\n",
    "print('#Korean Population by Region')\n",
    "print('* Total new cases: ', sum_covid)\n",
    "print ()\n",
    "print('| Region   | New Cases| Ratio(%) | New Cases/ 1M|')\n",
    "print('| ---------| ---------| -------- | -------------|')\n",
    "for idx, cases in enumerate(n_covid):\n",
    "    ratio = (cases / sum_covid) * 100\n",
    "    print('| %s | %d | %.1f | %.2f |' % (regions[idx], cases, ratio, norm_covid[idx]))\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d4914ba-1ec7-427b-980b-59498f884f30",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b466d0d-72f9-49f5-bf21-c8618b544516",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-ai-2024.04-py310",
   "language": "python",
   "name": "conda-env-anaconda-ai-2024.04-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
